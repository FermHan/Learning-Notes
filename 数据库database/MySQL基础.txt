[TOC]

﻿##本单元目标

	一、为什么要学习数据库
	二、数据库的相关概念      
		DBMS、DB、SQL
	三、数据库存储数据的特点
	四、初始MySQL
		MySQL产品的介绍        
		MySQL产品的安装          ★        
		MySQL服务的启动和停止     ★
		MySQL服务的登录和退出     ★      
		MySQL的常见命令和语法规范      
	五、DQL语言的学习   ★              
		基础查询        ★             
		条件查询  	   ★			
		排序查询  	   ★				
		常见函数        ★               
		分组函数        ★              
		分组查询		   ★			
		连接查询	 	★			
		子查询       √                  
		分页查询       ★              
		union联合查询	√			
		
	六、DML语言的学习    ★             
		插入语句						
		修改语句						
		删除语句						
	七、DDL语言的学习  
		库和表的管理	 √				
		常见数据类型介绍  √          
		常见约束  	  √			
	八、TCL语言的学习
		事务和事务处理                 
	九、视图的讲解           √
	十、变量                      
	十一、存储过程和函数   
	十二、流程控制结构       

##数据库的好处
	1.持久化数据到本地
	2.可以实现结构化查询，方便管理

##数据库相关概念

数据放表里，各类表放在档案袋（数据库）里。

大婶（数据库服务器）管理着档案袋.

那么服务器是不是就是mysql呢？

答：对于数据库存储数据来说，国际上有sql标准。如列类型，sql语法是有ISO标准的。

很多软件开发商遵守sql标准，来开发一套软件，用来存储和管理数据这套软件，就可以称之为数据库管理系统。（各产商的产品未必100%遵循，有微笑差异）

数据库存储数据的特点

	1、将数据放到表中，表再放到库中
	2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。
	3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。
	4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”
	5、表中的数据是按行存储的，每一行类似于java中的“对象”。

##MySQL产品的介绍和安装

C、s架构的软件，一般来讲安装服务端。

DBMS分为两类：
– 基于共享文件系统的DBMS （Access ）
– 基于客户机——服务器的DBMS（MySQL、 Oracle、 SqlServer） 

### 图形化界面

SQLyog

###MySQL服务的启动和停止
	方式一：计算机——右击管理——服务
	方式二：通过管理员身份运行，然后输入
	net start 服务名（启动服务） //net start mysql
	net stop 服务名（停止服务）

###MySQL服务的登录和退出   

登录：

```mysql
方式一：通过mysql自带的客户端cmd
只限于root用户

方式二：通过windows自带的客户端cmd
登录：
mysql 【-h主机名 -P端口号 】-u用户名 -p密码
例：mysql -h localhost -P 3306 -u root -p123456(最后一个不能有空格)
简例：mysql -u root -p(默认连本机的3306)


进去后我们面对的是库（项目）>>表>>数据
链接成功后，mysql和cmd的关系：
客户端client   服务端server。好比QQ浏览器和163网站的服务器一样。mysql mysqld
```

退出：

`exit或ctrl+C`



###MySQL的常见命令 

0.查看服务器的版本

```mysql
方式一：登录到mysql服务端
select version();
方式二：没有登录到mysql服务端
mysql --version
或 mysql --V
```


1.查看当前所有的数据库
```mysql
show databases;
显示如下：
| Database           |
+--------------------+
| information_schema |不能动
| mysql              |不能动
| performance_schema |不能动
| test               |
+--------------------+
```

2.打开指定的库

`use 库名`

3.查看当前库的所有表

`show tables;`
4.查看其它库的所有表
`show tables from 库名;`
5.创建表

```mysql
create table 表名(
	列名 列类型,
	列名 列类型，
	。。。
);

create table test(
	id varchar<30>,
    age int,
    name varchar<30>,
    birthday date
);
```
删除表：`drop table 表名`

6.查看表结构
`desc 表名;`

7.显示表中的所有数据

```MYSQL
select * from 表名; //查询所有列
select 列名1,列名2, … from 表名 //查询特定的列:select id,name from customer
select id,name,age from customer where age>21; //对查询的数据进行过滤
select id,name,age from customer where age between 19 and 22;//运算符
select id,name,age from customer where age=20 or age=22;//or
select * from customer where age in(10,15,16);//in
select name from customer where name like '%om%'//like  _ %
select name from customer where salary is null;//is null // is not null
```

查询并排序

```MYSQL
select *
from customer
order by salary;//升序

select *
from customer
order by salary desc;// 降序
```

查询并分组：

```MYSQL


```



8.向表中插入记录：

```mysql
insert into 表名(列名列表) values(列对应的值的列表); 

例：insert into customer(id,name,age) values('110','TOM',20); 
```

注意：插入 varchar 或 date 型的数据要用 单引号 引起来 

9.修改记录：

```MYSQL
update 表名 set 列1 = 列1的值, 列2 = 列2的值 where..

update customer
set age=22,birthday='1999-01-02' 
where id='110' 
```

10.删除记录：

```MYSQL
delete from 表名 where ...

delete from customer
where id='110';
```

alter table stu add age tinyint(1)

###MySQL的语法规范
```mysql
1.不区分大小写,但建议关键字大写，表名、列名小写
2.每条命令最好用分号结尾（或\g结尾）
3.每条命令根据需要，可以进行缩进 或换行。各子句一般分行写
4.注释
	单行注释：#注释文字
	单行注释：-- 注释文字（要有空格）
	多行注释：/* 注释文字  */
```

### SQL的语言分类

```mysql
DQL（Data Query Language）：数据查询语言
	select 
DML(Data Manipulate Language):数据操作语言
	insert 、update、delete
DDL（Data Define Languge）：数据定义语言
	create、drop、alter
TCL（Transaction Control Language）：事务控制语言
	commit、rollback
```

## DML语言

tee D:\HHH.SQL

```mysql
CREATE TABLE stu(
id INT PRIMARY KEY AUTO_INCREMENT,
sname VARCHAR(10) NOT NULL DEFAULT '',
gender CHAR(1) NOT NULL DEFAULT '',
company VARCHAR(20) NOT NULL DEFAULT '',
salary DECIMAL(6.2) NOT NULL DEFAULT 8000.00,
fanbu SMALLINT NOT NULL DEFAULT 0
)ENGINE MYISAM CHARSET utf8;
desc stu;
```

### 行数据插入

语法：

```MYSQL
insert into stu表名
(字段名，...)
values
(,..),
(,..);

方式2：
insert into 表名 set 字段=值,字段=值,...;
```

特点：

1、字段类型和值类型一致或兼容，而且一一对应
2、可以为空的字段，可以不用插入值，或用null填充
3、不可以为空的字段，必须插入值
4、字段个数和值的个数必须一致
5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致

1、要求值的类型和字段的类型要一致或兼容
2、字段的个数和顺序不一定与原始表中的字段个数和顺序一致
但必须保证值和字段一一对应
3、假如表中有可以为null的字段，注意可以通过以下两种方式插入null值
	①字段和值都省略
	②字段写上，值使用null
4、字段和值的个数必须一致
5、字段名可以省略，默认所有列



两种方式 的区别：
1.方式一支持一次插入多行，语法如下：
insert into 表名【(字段名,..)】 values(值，..),(值，...),...;
2.方式一支持子查询，语法如下：
insert into 表名    查询语句;



set names gbk;

### 行修改

修改单表语法：

```mysql
update stu表名 
set 
gender='女',fanbu=200
【where 条件】//不加where全改
```

修改多表语法：

```mysql
update 表1 别名1,表2 别名2
set 
字段=新值，字段=新值
where 
连接条件 and 筛选条件

update 表1 别名 
left|right|inner join 表2 别名 
on 连接条件  
set 字段=值,字段=值 
【where 筛选条件】;
```

### 行删除

删除就是删除一行，不存在删除某几列

删除表用drop

方式1：delete语句 

```MYSQL
# 单表的删除： ★
delete from 表名 
【where 筛选条件】

#多表的删除：
delete 别名1，别名2
from 表1 别名1，表2 别名2
where 连接条件
and 筛选条件;

delete 别名1,别名2 from 表1 别名 
inner|left|right join 表2 别名 
on 连接条件
 【where 筛选条件】
```

方式2：truncate语句 // 使成平面

```mysql
truncate table 表名stu
where
```

两种方式的区别【面试题】

```MYSQL
# 1.truncate不能加where条件，而delete可以加where条件
#2.truncate的效率高一丢丢

#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从【1】开始
#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的【断点】处开始

#4.truncate删除不能回滚，delete删除可以回滚


1.truncate删除后，如果再插入，标识列从1开始
  delete删除后，如果再插入，标识列从断点开始
2.delete可以添加筛选条件
 truncate不可以添加筛选条件
3.truncate效率较高
4.truncate没有返回值
delete可以返回受影响的行数
5.truncate不可以回滚
delete可以回滚
```

## DDL语句

### 库和表的管理

库的管理：

```mysql
一、创建库
create database [if not exists] 库名 character set 字符集名;
二、删除库
drop database 库名
alter database 库名 character set 字符集名; 
# 改名也可以在windows中直接改，改签需要net stop 名字 
四、删除库
show databases;
```

表的管理：

1.创建表

```mysql
CREATE TABLE IF NOT EXISTS stuinfo(
	stuId INT,
	stuName VARCHAR(20),
	gender CHAR,
	birthday DATETIME
);

DESC studentinfo;
-- 主键约束primary key，多个主键为可以最后再写primary key(id,name),联合主键只要有一个不同就ok，完全一样才报错。unique也同理
---- 自增约束auto_increment
能够唯一确定他一张表中的一条记录，也就是我们通过给某个字段添加约束，就可以使得该字段不重复且不为空。因为能确定，反之每张表也应有主键，所以主键不能为空
后续补充可用 alter table 表面add primary(id)

外键，唯一，非空，默认约束
Alter table 表明 drop primary key删除主键
唯一约束unique
```
约束可以建表时候添加，可以使用alter add或drop，可以使用alter modify。3种方式都可以。
外键约束。父表子表。主表副表。create的时候name int,foreign key (Name) references class(id)
班级主 学生

​	2.修改表 alter

```mysql
ALTER TABLE 表名 
ADD| MODIFY |DROP| CHANGE 
增列|改列类型 |删列 | 改列名
COLUMN 
字段名 【字段类型】
【first|after 字段名】;;
```

- ①修改字段名

```MYSQL
ALTER TABLE studentinfo 
CHANGE  COLUMN 
sex 
gender CHAR;
```

- ②修改表名

```MYSQL
ALTER TABLE stuinfo 
RENAME [TO]  
studentinfo;#已废弃
```

- ③修改字段类型 和列级约束

```MYSQL
ALTER TABLE studentinfo 
MODIFY COLUMN 
birthday DATE ;
```

- ④添加字段

```MYSQL
ALTER TABLE studentinfo 
ADD COLUMN 
email VARCHAR(20) 
first;
```

- ⑤删除字段

```mysql
ALTER TABLE studentinfo 
DROP COLUMN 
email;
```

3.删除表

```mysql
DROP TABLE [IF EXISTS] studentinfo;
```

4.表的复制

可以跨库，加点即可

```MYSQL
# 仅仅复制表的结构
CREATE TABLE copy1
LIKE stu;

#复制表的结构+数据
CREATE TABLE copy2
SELECT * FROM stu;

#只复制部分数据
CREATE TABLE copy2
SELECT id,sname
FROM stu
where nation='中国';

#只复制某些字段
CREATE TABLE copy3;
SELECT id,sname
From Stu
where 0;
```

### 常见约束

```mysql
NOT NULL
DEFAULT
UNIQUE
CHECK
PRIMARY KEY
FOREIGN KEY
```

### 数据类型（列类型）

##### 整数：

```MYSQL
默认有符号
TINYINT       8  bit
SMALLINT	  16
MEDIUMINT 	  24
INT 		  32
BIGINT		  64
-----------------
符号(默认有符号)
INT UNSIGNED
-----
INT(7) zerofill //会默认添加 unsigned 不够长度用0填充

可以为整数类型指定宽度，
例如  INT(11)
对大多数应用这是没有意义的：它不会限制值的合法范围，只是规定了Mysql的一些交互工具（例如mysql命令行客户端）用来显示【字符的个数】。对于存储和计算来说，INT(1) 和 INT(20)是相同的。

```

##### 实数：

分为浮点数和定点数

也可以使用DECIMAL存储比BIGINT还大的整数。

1.浮点数类型：

```MYSQL
float(M,D)   32位
double(M,D)  64位
```

- M 精度，代表小数的总位数
- D  标度，代表小数位

可以省略M D，会根据插入数据的精度来决定精度

浮点数多大空间呢？

如果M≤24，占4个字节，否则占8字节。

2.定点数：

定点数是把整数部分和小数部分分开存储的。比float精确

定点数类型：

```MYSQL
DEC(M,D)  DECIMAL(M,D)
```

M默认为10 M默认为0

同样存储FLOAT(8.2)和DECIMAL(8.2) ，准确率可能是不一样的。



位类型：Bit(M)

##### 字符串类型：

```MYSQL
较短的文本：
VARCHAR 可变长 字符串
CHAR 定长 字符串

较长的文本：
text
blob

binary
varbinany
```

- `varchar`

存储可变长 字符串，比定长类型更节省空间。因为仅使用必要的空间。`VARCHAR`使用1或2个额外字节记录字符串的长度(列前？)。如过最大长度小于255，那么就置使用1字节，否则使用2字节。但是在UPDATE时可能使行变得比原来更长，这就导致需要做额外的工作。（MYISAM会将行拆封不同的片段存储，InnoDB则需要分裂页来使行可以放进页内。）

M可取 65535

M限制的是字符，不是字节。char(2) charset utf8，能存2个utf8字符，比如“中国”

不可以省略M

- `CHAR`

当存储CHAR值时，MYSQL会删除所有的末尾空格。

不够M字符时，内部用空格补齐，取出时再把右侧空格删掉。

空格填充是（右侧空格）

M可取 255 

默认M=1

- `TEXT`

文本类型，可以存比较大的文本段，搜索速度稍慢。

声明text列时，不必给默认值。

因此，如果不是特别大的内容，建议用char varchar来代替

- `BLOB`

二进制类型，用来存储图像，音频等二进制信息。

意义：2进制，0-255都可能出现。

blob在于防止因为字符集的问题，导致信息丢失。

比如，一张图片中有0xFF字节，这个在ascii字符集认为非法，在入库的时候，被过滤了



默认存储引擎：InnoDB和MyISAM

##### Set类型

Set类型一次可以选取多个成员，而Enum只能选1个。

```MYSQL
INsert INTO stu
ZIMU
VALUE
('A','C')
```

##### 日期和时间

必须用单引号引起来

```MYSQL
DATE	   3B
TIME	   3B
DATETIME   8B
TIMESTAMP  4B
NOW()
```

TIMESTAMP和实际时区有关，更能反映实际的日期，而datetime则只能反映出插入时的当地时区，timestamp的属性受mysql版本和sqlmode的影响很大。

![](https://raw.githubusercontent.com/FermHan/tuchuang/master/20190915000252.png)



##DQL语言的学习

查哪些列

查哪张表

查哪些行



###进阶1：基础查询

语法：

```mysql
SELECT 要查询的东西
FROM 表名;
```

• SELECT 标识选择哪些列（*代表全部）。
• FROM 标识从哪个表中选择。 

类似于Java中 :`System.out.println(要打印的东西);`
特点：
①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在
② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数
数值型和日期型的常量值必须用单引号引起来，数值型不需要

两兽痕，四红月，十鹰眼，八狩猎，六异变

###进阶2：条件查询

条件查询：根据条件过滤原始表的数据，查询到想要的数据

语法：

```MYSQL
select 
	要查询的字段|表达式|常量值|函数
from 
	表
where 
	条件 ;
```

- WHERE 子句紧随 FROM 子句。 

```MYSQL
# SELECT `last_name`,salary FROM employees;逗号隔开，`号标识字段
# SELECT * FROM employees;
# SELECT 100%98 AS 结果;起别名，或空格
# SELECT DISTINCT department_id FROM employees;去重
# +号仅仅只有一个功能是运算符，如果select '123'+90;
一个为数值 一个为字符，则试图将字符转成数值。如果转换失败，则将字符型转换成0；null+任意都等于null
# SELECT CONCAT(`first_name`,`last_name`) AS 姓名 FROM myemployees.`employees`;
ifnull
# SELECT IFNULL(值，真的话等于多少)
isnull
```

类的别名：

紧跟列名， 也可以在列名和别名之间加入关键字
‘AS’ ，别名使用双引号， 以便在别名中包含空
格或特殊的字符并区分大小写。 

字符串：

• 字符串可以是 SELECT 列表中的一个字符,数字,日
期。
• 日期和字符只能在单引号中出现。
• 每当返回一行时，字符串被输出一次。 

```mysql
分类：
一、条件表达式
	示例：salary>10000
	条件运算符：
	> < >= <= = != <>不等于，注意等于是=

二、逻辑表达式
示例：salary>10000 && salary<20000
逻辑运算符：
	and（&&）:两个条件如果同时成立，结果为true，否则为false
	or(||)：两个条件只要有一个成立，结果为true，否则为false
	not(!)：如果条件成立，则not后为false，否则为true
# SELECT * FROM employees WHERE name LIKE '%a%' OR salary>100;

三、模糊查询
like
示例：last_name like 'a%'
# SELECT * FROM employees WHERE last_name LIKE '%a%';%代表通配符
通配符：
%任意多个字符
_任一个字符,可以用转义符

between and
SELECT * FROM `employees` WHERE `employee_id` BETWEEN 100小值 AND 120大值;不可以换顺序

in//NOT IN
SELECT * FROM `employees` WHERE job_id IN ['AD_VP','AD_PRES']不可以写通配符，可以写()


SELECT `last_name`,`commission_pct` FROM employees WHERE `commission_pct` IS NOT NULL;等号不能用于判断null值
SELECT `last_name`,`commission_pct` FROM employees WHERE `commission_pct` <=> 120;安全等于。即可以判断NULL，又可以判断数值

```

###进阶3：排序查询	

语法：

```mysql
select 要查询的东西
from 表
where 条件

order by 排序的字段|表达式|函数|别名 【asc|desc】
```

- ORDER BY 子句在SELECT语句的【结尾】。 

-  【asc|desc】为升降序
- 多个顺序时，写多个即可，逗号分隔

### 分组函数

分组函数作用于一组数据，并对一组数据返回一个值。 

```MYSQL
select 要查询的东西
from 表
where 条件
group by 
order by 排序的字段|表达式|函数|别名 【asc|desc】

分组函数：
• AVG()
• COUNT(expr)//计数,返回expr不为空的记录总数。,适用于任意数据类型。// select count(*) from customer where id=110;
• MAX()
• MIN()
• SUM()

# 在SELECT 列表中所有未包含在组函数中的列都应该包含在 GROUP BY 子句中。
SELECT ID,AVG(salary)
FROM employees
GROUP BY ID;
#包含在 GROUP BY 子句中的列不必包含在SELECT 列表中
SELECT AVG(salary)
FROM employees
GROUP BY ID;

#在GROUP BY子句中包含多个列


```

非法使用组函数 

• 不能在 WHERE 子句中使用组函数。
• 可以在 HAVING 子句中使用组函数。 

过滤分组： HAVING 子句 

使用 HAVING 过滤分组:
1. 行已经被分组。
2. 使用了组函数。
3. 满足HAVING 子句中条件的分组将被显示。 

```MYSQL
SELECT column, group_function
FROM table
[WHERE condition]
[GROUP BY group_by_expression]
[HAVING group_condition]
[ORDER BY column];//分组条件
```



###进阶4：常见函数
```mysql
一、单行函数
1、字符函数
	length长度，中文是3B
	concat()拼接
	substr截取子串（字符串，开始位置从1开始，长度中文也是1个）
	instr 返回子串第一次出现的索引，如果找不到返回0
	upper转换成大写
	lower转换成小写
	trim去前后指定的空格和字符(字符串，去除内容' ')
	ltrim去左边空格
	rtrim去右边空格
	replace替换(字符串，被替换内容，用什么替换)
	lpad左填充(字符串，填充后的长度，填空内容'')
	rpad右填充
	instr返回子串第一次出现的索引
	length 获取字节个数
	
CONCAT('Hello', 'World') HelloWorld
SUBSTR('HelloWorld',1,5) Hello
LENGTH('HelloWorld') 10
INSTR('HelloWorld', 'W') 6
LPAD(salary,10,'*')  *****24000
RPAD(salary, 10, '*')  24000*****
TRIM('H' FROM 'HelloWorld')  elloWorld
REPLACE('abcd','b','m')  amcd


2、数学函数
	round 四舍五入(数，小数点后保留位数=0)
	rand 随机数
	floor向下取整（小于等于）
	ceil向上取整（大于等于）
	mod取余MOD(10.3)
	truncate截断
3、日期函数
	now()当前系统日期+时间
	curdate()当前系统日期
	curtime()当前系统时间
	str_to_date(,) 将字符转换成日期
	date_format(,)将日期转换成字符
4、流程控制函数
	if 处理双分支
	case语句 处理多分支
		when情况1  then处理等值判断
		when情况2  then处理条件判断
		ELSE
		END
	
5、其他函数
	version版本
	database当前库
	user当前连接用户
#一、字符函数

#1.lth 获取参数值的字节个数
SELECT LENGTH('john');
SELECT LENGTH('张三丰hahaha');

SHOW VARIABLES LIKE '%char%'

#2.concat 拼接字符串
SELECT CONCAT(last_name,'_',first_name) 姓名 FROM employees;

#3.upper、lower
SELECT UPPER('john');
SELECT LOWER('joHn');
#示例：将姓变大写，名变小写，然后拼接
SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;

#4.substr、substring
注意：索引从1开始
#截取从指定索引处后面所有字符
SELECT SUBSTR('李莫愁爱上了陆展元',7)  out_put;

#截取从指定索引处指定字符长度的字符
SELECT SUBSTR('李莫愁爱上了陆展元',1,3) out_put;

#案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来
SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2)))  out_put
FROM employees;

#5.instr 返回子串第一次出现的索引，如果找不到返回0
SELECT INSTR('杨不殷六侠悔爱上了殷六侠','殷八䩠AS out_put;

#6.trim去前后空格
SELECT LENGTH(TRIM('    张翠山    ')) AS out_put;
SELECT TRIM('aa' FROM 'aaaa张aaa翠山aaaaa')  AS out_put;

#7.lpad 用指定的字符实现左填充指定长度
SELECT LPAD('殷素素',2,'*') AS out_put;

#8.rpad 用指定的字符实现右填充指定长度
SELECT RPAD('殷素素',12,'ab') AS out_put;


#9.replace 替换

SELECT REPLACE('周芷若周芷若周芷若周芷若张无忌爱上了周芷若','周芷若','赵敏') AS out_put;



#二、数学函数

#round 四舍五入
SELECT ROUND(-1.55);
SELECT ROUND(1.567,2);


#ceil 向上取整,返回>=该参数的最小整数
SELECT CEIL(-1.02);

#floor 向下取整，返回<=该参数的最大整数
SELECT FLOOR(-9.99);

#truncate 截断
SELECT TRUNCATE(1.69999,1);

#mod取余
/*
mod(a,b) ：  a-a/b*b

mod(-10,-3):-10- (-10)/(-3)*（-3）=-1
*/
SELECT MOD(10,-3);
SELECT 10%3;


#三、日期函数

#now 返回当前系统旟+时间
SELECT NOW();

#curdate 返回当前系统日期，不包含时间
SELECT CURDATE();

#curtime 返回当前时间，不包含日期
SELECT CURTIME();


#可以获取指定的部分，年、月、日、小时、分钟、秒
SELECT YEAR(NOW()) 年;
SELECT YEAR('1998-1-1') 年;

SELECT  YEAR(hiredate) 年 FROM employees;

SELECT MONTH(NOW()) 月;
SELECT MONTHNAME(NOW()) 月;

#str_to_date 将字符通过指定的格式转换成日期,中间的符号要一致
SELECT STR_TO_DATE('1998-3-2','%Y-%c-%d') AS out_put;

#查询入职日期为1992--4-3的员工信息
SELECT * FROM employees WHERE hiredate = '1992-4-3';
或
SELECT * FROM employees WHERE hiredate = STR_TO_DATE('4-3 1992','%c-%d %Y');
%Y四位的年份 %y二位的年份 %m二位的月份 %c月份 %d二位的日 %H二十四制小时 %h十二制小时 %i二位制分钟 %s二位制秒

#date_format 将日期转换成字符
SELECT DATE_FORMAT(NOW(),'%Y年%m月%d日') AS out_put;

#查询有奖金的员工名和入职日期(xx月/xx日 xx年)
SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日 %Y年') 入职日期
FROM employees
WHERE commission_pct IS NOT NULL;


#四、其他函敍
SELECT VERSION();
SELECT DATABASE();
SELECT USER();

#五、流程控制函数
#1.if函数： if else 的效果IF(表达式，真的话，假的话)

SELECT IF(10<5,'大','小');
SELECT last_name,commission_pct,IF(commission_pct IS NULL,'没奖金，呵呵','有奖金，嘻嘻') 备注
FROM employees;


#2.case函数的使用一： switch case 的效果
/*
java中
switch(变量或表达式){
	case 常量1：语句1;break;
	...
	default:语句n;break;
}
mysql中：
case 要判断的字段或表达式
when 常量1 then 要显示的值1或语句1;
when 常量2 then 要显示的值2或语句2;
...
else 要显示的值n或语句n;
end
*/

/*案例：查询员工的工资，要求
部门号=30，显示的工资为1.1倍
部门号=40，显示的工资为1.2倍
部门号=50，显示的工资为1.3倍
其他部门，显示的工资为原工资
*/
SELECT salary 原始工资,department_id,
CASE department_id
WHEN 30 THEN salary*1.1
WHEN 40 THEN salary*1.2
WHEN 50 THEN salary*1.3
ELSE salary 
END AS 新工资
FROM employees;

#3.case 函数的使用二：类似于 多重if
/*
java中：
if(条件1){
	语句1；
}else if(条件2){
	语句2；
}
...
else{
	语句n;
}
------
mysql中：
case[case后没有语句直接when]
when 条件1 then 要显示的值1或语句1
when 条件2 then 要显示的值2或语句2
。。。
else 要显示的值n或语句n
end
*/

#案例：查询员工的工资的情况
如果工资>20000,显示A级别
如果工资>15000,显示B级别
如果工资>10000，显示C级别
否则，显示D级别


SELECT salary,
CASE 
WHEN salary>20000 THEN 'A'
WHEN salary>15000 THEN 'B'
WHEN salary>10000 THEN 'C'
ELSE 'D'
END AS 工资级别
FROM employees;
```

```MYSQL
SELECT LENGTH(last_name) 长度,SUBSTR(last_name,1,1) 首字符,last_name
FROM employees
ORDER BY 首字符;

SELECT last_name,job_id AS  job,
CASE job_id
WHEN 'AD_PRES' THEN 'A' 
WHEN 'ST_MAN' THEN 'B' 
WHEN 'IT_PROG' THEN 'C' 
WHEN 'SA_PRE' THEN 'D'
WHEN 'ST_CLERK' THEN 'E'
END AS Grade
FROM employees
WHERE job_id = 'AD_PRES';
```




二、分组函数：统计使用，统计函数，聚合函数


```mysql
	sum 求和
	max 最大值（可以算字母顺序，日期顺序）
	min 最小值
	avg 平均值
	count 计数//非空的个数

	特点：
	1、以上五个分组函数都忽略null值，avg也只计算非null，除了count(*)
	2、sum和avg一般用于处理数值型
		max、min、count可以处理任何数据类型
    3、都可以搭配distinct使用，用于统计去重后的结果
	4、count的参数可以支持：
		字段、*、常量值，一般放1

	   建议使用 count(*)统计行数，括号内任意数字或任意常量也可以统计行数
	   
select avg(score) from stu where class='1';
select avg(score) from stu group by class;

#1.查询各job_id的员工工资的最大值，最小值，平均值，总和，并按job_id升序
SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_id
FROM employees
GROUP BY job_id
ORDER BY job_id;


#2.查询员工最高工资和最低工资的差距（DIFFERENCE）
SELECT MAX(salary)-MIN(salary) DIFFRENCE
FROM employees;
#3.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内
SELECT MIN(salary),manager_id
FROM employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id
HAVING MIN(salary)>=6000;

#4.查询所有部门的编号，员工数量和工资平均值,并按平均工资降序
SELECT department_id,COUNT(*),AVG(salary) a
FROM employees
GROUP BY department_id
ORDER BY a DESC;
#5.选择具有各个job_id的员工人数
SELECT COUNT(*) 个数,job_id
FROM employees
GROUP BY job_id;
```


###进阶5：分组查询
```mysql
语法：
select 查询的字段，分组函数
from 表
group by 分组的字段
```


​	
```mysql
特点：
1、可以按单个字段分组
2、和分组函数一同查询的字段最好是分组后的字段
3、分组筛选
		针对的表	位置			关键字
分组前筛选：	原始表		group by的前面		where
分组后筛选：	分组后的结果集	group by的后面		having

4、可以按多个字段分组，字段之间用逗号隔开
5、可以支持排序
6、having后可以支持别名
```

###进阶6：多表连接查询

	笛卡尔乘积：如果连接条件省略或无效则会出现
	解决办法：添加上连接条件

一、传统模式下的连接 ：等值连接——非等值连接


	1.等值连接的结果 = 多个表的交集
	2.n表连接，至少需要n-1个连接条件
	3.多个表不分主次，没有顺序要求
	4.一般为表起别名，提高阅读性和性能

二、sql99语法：通过join关键字实现连接

```mysql
含义：1999年推出的sql语法
支持：
等值连接、非等值连接 （内连接）
外连接
交叉连接

语法：

select 字段，...
from 表1
【inner|left outer|right outer|cross】join 表2 on  连接条件
【inner|left outer|right outer|cross】join 表3 on  连接条件
【where 筛选条件】
【group by 分组字段】
【having 分组后的筛选条件】
【order by 排序的字段或表达式】

好处：语句上，连接条件和筛选条件实现了分离，简洁明了！

where . = . 
三表查询 where . = . and . = . 
```


三、自连接

案例：查询员工名和直接上级的名称

sql99

```mysql
SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m ON e.`manager_id`=m.`employee_id`;
```

sql92


```mysql
SELECT e.last_name,m.last_name
FROM employees e,employees m 
WHERE e.`manager_id`=m.`employee_id`;
```


###进阶7：子查询

含义：

	一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询
	在外面的查询语句，称为主查询或外查询

特点：

	1、子查询都放在小括号内
	2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧
	3、子查询优先于主查询执行，主查询使用了子查询的执行结果
	4、子查询根据查询结果的行数不同分为以下两类：
	① 单行子查询
		结果集只有一行
		一般搭配单行操作符使用：> < = <> >= <= 
		非法使用子查询的情况：
		a、子查询的结果为一组值
		b、子查询的结果为空
		
	② 多行子查询
		结果集有多行
		一般搭配多行操作符使用：any、all、in、not in
		in： 属于子查询结果中的任意一个就行
		any和all往往可以用其他查询代替

###进阶8：分页查询

应用场景：

	实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句

语法：

	select 字段|表达式,...
	from 表
	【where 条件】
	【group by 分组字段】
	【having 条件】
	【order by 排序的字段】
	limit 【起始的条目索引，条目数】;

特点：

```mysql
1.起始条目索引从0开始

2.limit子句放在查询语句的最后

3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage
假如:
每页显示条目数sizePerPage
要显示的页数 page

- select sname from score where degree=(select max(degree) from score);
这句的启发是：括号里的select的结果是一个值，这样degree=值就是一个where语句，缺点是有可能返回多个等大最大值。即先找到最大值再用where
- 可以用limit实现查取某列第一大的值
select name from stu order by degree limit 0,1; // 从0开始一个值
```

###进阶9：联合查询

union 合并 联合，将多次查询结果合并为一个结果

引入：
	union 联合、合并

语法：

```mysql
select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】

select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】
.....
select 字段|常量|表达式|函数 【from 表】 【where 条件】
```

三、意义
1、将一条比较复杂的查询语句拆分成多条语句
2、适用于查询多个表的时候，查询的列基本是一致

特点：

	1、多条查询语句的查询的列数必须是一致的
	2、多条查询语句的查询的列的类型几乎相同
	3、union代表去重，union all代表不去重

![1568544115252](C:\Users\55373\AppData\Roaming\Typora\typora-user-images\1568544115252.png)

假如表中有可以为null的字段，注意可以通过以下两种方式插入null值

## 常见约束

含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性

##### 六大约束：

- NOT NULL：非空，用于保证该字段的值不能为空
  	比如姓名、学号等
- DEFAULT：默认，用于保证该字段有默认值
  	比如奖金
- PRIMARY KEY：主键，用于保证该字段的值具有【唯一性】，并且非空
  	比如学号、员工编号等
- 
- UNIQUE：唯一，用于保证该字段的值具有唯一性，可以为空（对比主键）
  	比如座位号，写了就唯一，要不别写
- CHECK：检查约束【mysql中不支持】
  	比如年龄、性别
- FOREIGN KEY：外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值
  - 在从表添加外键约束，用于【引用主表】中某列的值
  - 比如学生表的专业编号，员工表的部门编号，员工表的工种编号

```MYSQL
# 外键例子---列级约束例子------
CREATE TABLE stuiInfo(
	id INT PRIMARY KEY,#主键
	stuName VARCHAR(20) NOT NULL UNIQUE,#非空
	gender CHAR(1) CHECK(gender='男' OR gender ='女'),#检查
	seat INT UNIQUE,#唯一
	age INT DEFAULT  18,#默认约束
	majorId INT REFERENCES major(id)#外键-！！！
);

CREATE TABLE major(
	id INT PRIMARY KEY,
	majorName VARCHAR(20)
);

#查看stuinfo中的所有索引，包括主键、外键、唯一
SHOW INDEX FROM stuinfo;
```

##### 添加约束的时机：

​	1.创建表时
​	2.修改表时

##### 约束的添加分类：

- 列级约束：六大约束语法上都支持，但外键约束没有效果（外键约束写了也白写）
- 表级约束：除了非空、默认，其他的都支持

```mysql
列级约束的例子即上个程序

表级约束语法：在各个字段的最下面
 【constraint 约束名】 约束类型(字段名)
 
# 表级约束例子--------
DROP TABLE IF EXISTS stuinfo;
CREATE TABLE stuinfo(
	id INT,
	stuname VARCHAR(20),
	gender CHAR(1),
	seat INT,
	age INT,
	majorid INT,
	
	CONSTRAINT pk PRIMARY KEY(id),#主键
	CONSTRAINT uq UNIQUE(seat),#唯一键
	CONSTRAINT ck CHECK(gender ='男' OR gender  = '女'),#检查
	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键
);

SHOW INDEX FROM stuinfo;


#通用的写法：★------------------

CREATE TABLE IF NOT EXISTS stuinfo(
	id INT PRIMARY KEY,
	stuname VARCHAR(20),
	sex CHAR(1),
	age INT DEFAULT 18,
	seat INT UNIQUE,
	majorid INT,
	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)
);
```
主键和唯一的大对比：

|      | 保证唯一性 | 是否允许为空 | 一个表中可以有多少个 | 是否允许组合 |
| ---- | ---------- | ------------ | -------------------- | ------------ |
| 主键 | √          | ×            | 至多有1个            | √，但不推荐  |
| 唯一 | √          | √            | 可以有多个           | √，但不推荐  |

外键的特点：

1. 要求在【从表】设置外键关系
2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求
3. 【主表的关联列必须是一个key】（一般是主键或唯一）
4. 插入数据时，先插入主表，再插入从表
   1. 删除数据时，先删除从表，再删除主表

上面的例子是创建表时添加约束，下面还有修改表时添加约束。

二、修改表时添加约束

```MYSQL
/*
1、添加列级约束
alter table 表名 modify column 字段名 字段类型 新约束;

2、添加表级约束
alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;
*/
DROP TABLE IF EXISTS stuinfo;
CREATE TABLE stuinfo(
	id INT,
	stuname VARCHAR(20),
	gender CHAR(1),
	seat INT,
	age INT,
	majorid INT
)
DESC stuinfo;
#1.添加非空约束
ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;
#2.添加默认约束
ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;
#3.添加主键
#①列级约束
ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;
#②表级约束
ALTER TABLE stuinfo ADD PRIMARY KEY(id);

#4.添加唯一
#①列级约束
ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;
#②表级约束
ALTER TABLE stuinfo ADD UNIQUE(seat);

#5.添加外键
ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); 
```

三、修改表时删除约束

1.删除非空约束

```MYSQL
ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;
```

2.删除默认约束

```MYSQL
ALTER TABLE stuinfo MODIFY COLUMN age INT ;
```

3.删除主键

```MYSQL
ALTER TABLE stuinfo DROP PRIMARY KEY;
```

4.删除唯一

```MYSQL
ALTER TABLE stuinfo DROP INDEX seat;
```

5.删除外键

```MYSQL
ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;
```

SHOW INDEX FROM stuinfo;

#### 标识列：

又称自增长列

含义：可以不用手动地插入值，系统提供默认的序列值。

```MYSQL
AUTO_INCREMENT

SET AUTO_INCREMENT=2; # 重新设置步长。
需要更改起始值的时候，手动添加一个值即可。
其余时候填入null即可
# 修改表时设置标识列
alter table stu modify column id int primary key auto_increment;
# 修改表时删除标识列
alter table stu modify column id int primary;
```

问：标识列必须跟主键搭配吗？

答：不一定，但要求是一个key。

问：一个表中可以有多少标识列。

答：一个表中只能有一个标识列。

问：标识列的类型？

答：必须是数值型

##数据库事务
Transaction Control Language 事务控制语言

###含义

	通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态

```MYSQL
update 表 set 张三丰的余额=500 where name='张三丰'
意外
update 表 set 郭襄的余额=1500 where name='郭襄'
```



###特点

（ACID）

- 原子性：要么都执行，要么都回滚
- 一致性：保证数据的状态操作前和操作后保持一致
- 隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰
- 持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改

	

相关步骤：

	1、开启事务
	2、编写事务的一组逻辑操作单元（多条sql语句）
	3、提交事务或回滚事务

###事务的分类：

隐式事务，没有明显的开启和结束事务的标志

	比如
	insert、update、delete语句本身就是一个事务


显式事务，具有明显的开启和结束事务的标志

		1、开启事务
		取消自动提交事务的功能
		
		2、编写事务的一组逻辑操作单元（多条sql语句）
		insert
		update
		delete
		
		3、提交事务或回滚事务
###使用到的关键字

	set autocommit=0;
	start transaction;
	commit;
	rollback;
	
	savepoint  断点
	commit to 断点
	rollback to 断点


###事务的隔离级别:

事务并发问题如何发生？

	当多个事务同时操作同一个数据库的相同数据时
事务的并发问题有哪些？

	脏读：一个事务读取到了另外一个事务未提交的数据
	不可重复读：同一个事务中，多次读取到的数据不一致
	幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据

如何避免事务的并发问题？

	通过设置事务的隔离级别
	1、READ UNCOMMITTED
	2、READ COMMITTED 可以避免脏读
	3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读
	4、SERIALIZABLE可以避免脏读、不可重复读和幻读

设置隔离级别：

	set session|global  transaction isolation level 隔离级别名;
查看隔离级别：

	select @@tx_isolation;



##视图
含义：理解成一张虚拟的表

视图和表的区别：
	
		使用方式	占用物理空间
	
	视图	完全相同	不占用，仅仅保存的是sql逻辑
	
	表	完全相同	占用

视图的好处：


	1、sql语句提高重用性，效率高
	2、和表实现了分离，提高了安全性

###视图的创建
	语法：
	CREATE VIEW  视图名
	AS
	查询语句;
###视图的增删改查
	1、查看视图的数据 ★
	
	SELECT * FROM my_v4;
	SELECT * FROM my_v1 WHERE last_name='Partners';
	
	2、插入视图的数据
	INSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);
	
	3、修改视图的数据
	
	UPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';


​	
​	4、删除视图的数据
​	DELETE FROM my_v4;
###某些视图不能更新
	包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all
	常量视图
	Select中包含子查询
	join
	from一个不能更新的视图
	where子句的子查询引用了from子句中的表
###视图逻辑的更新
	#方式一：
	CREATE OR REPLACE VIEW test_v7
	AS
	SELECT last_name FROM employees
	WHERE employee_id>100;
	
	#方式二:
	ALTER VIEW test_v7
	AS
	SELECT employee_id FROM employees;
	
	SELECT * FROM test_v7;
###视图的删除
	DROP VIEW test_v1,test_v2,test_v3;
###视图结构的查看	
	DESC test_v7;
	SHOW CREATE VIEW test_v7;

##存储过程

含义：一组经过预先编译的sql语句的集合
好处：

	1、提高了sql语句的重用性，减少了开发程序员的压力
	2、提高了效率
	3、减少了传输次数

分类：

	1、无返回无参
	2、仅仅带in类型，无返回有参
	3、仅仅带out类型，有返回无参
	4、既带in又带out，有返回有参
	5、带inout，有返回有参
	注意：in、out、inout都可以在一个存储过程中带多个
###创建存储过程
语法：

	create procedure 存储过程名(in|out|inout 参数名  参数类型,...)
	begin
		存储过程体
	
	end

类似于方法：

	修饰符 返回类型 方法名(参数类型 参数名,...){
	
		方法体;
	}

注意

	1、需要设置新的结束标记
	delimiter 新的结束标记
	示例：
	delimiter $
	
	CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)
	BEGIN
		sql语句1;
		sql语句2;
	
	END $
	
	2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end
	
	3、参数前面的符号的意思
	in:该参数只能作为输入 （该参数不能做返回值）
	out：该参数只能作为输出（该参数只能做返回值）
	inout：既能做输入又能做输出


#调用存储过程
	call 存储过程名(实参列表)
##函数


###创建函数

学过的函数：LENGTH、SUBSTR、CONCAT等
语法：

	CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型
	BEGIN
		函数体
	
	END

###调用函数
	SELECT 函数名（实参列表）





###函数和存储过程的区别

			关键字		调用语法	返回值			应用场景
	函数		FUNCTION	SELECT 函数()	只能是一个		一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个
	存储过程	PROCEDURE	CALL 存储过程()	可以有0个或多个		一般用于更新


##流程控制结构

###系统变量
一、全局变量

作用域：针对于所有会话（连接）有效，但不能跨重启

	查看所有全局变量
	SHOW GLOBAL VARIABLES;
	查看满足条件的部分系统变量
	SHOW GLOBAL VARIABLES LIKE '%char%';
	查看指定的系统变量的值
	SELECT @@global.autocommit;
	为某个系统变量赋值
	SET @@global.autocommit=0;
	SET GLOBAL autocommit=0;

二、会话变量

作用域：针对于当前会话（连接）有效

	查看所有会话变量
	SHOW SESSION VARIABLES;
	查看满足条件的部分会话变量
	SHOW SESSION VARIABLES LIKE '%char%';
	查看指定的会话变量的值
	SELECT @@autocommit;
	SELECT @@session.tx_isolation;
	为某个会话变量赋值
	SET @@session.tx_isolation='read-uncommitted';
	SET SESSION tx_isolation='read-committed';

###自定义变量
一、用户变量

声明并初始化：

	SET @变量名=值;
	SET @变量名:=值;
	SELECT @变量名:=值;
赋值：

	方式一：一般用于赋简单的值
	SET 变量名=值;
	SET 变量名:=值;
	SELECT 变量名:=值;


	方式二：一般用于赋表 中的字段值
	SELECT 字段名或表达式 INTO 变量
	FROM 表;

使用：

	select @变量名;

二、局部变量

声明：

	declare 变量名 类型 【default 值】;
赋值：

	方式一：一般用于赋简单的值
	SET 变量名=值;
	SET 变量名:=值;
	SELECT 变量名:=值;


	方式二：一般用于赋表 中的字段值
	SELECT 字段名或表达式 INTO 变量
	FROM 表;

使用：

	select 变量名



二者的区别：

			作用域			定义位置		语法
用户变量	当前会话		会话的任何地方		加@符号，不用指定类型
局部变量	定义它的BEGIN END中 	BEGIN END的第一句话	一般不用加@,需要指定类型

###分支
一、if函数
	语法：if(条件，值1，值2)
	特点：可以用在任何位置

二、case语句

语法：

	情况一：类似于switch
	case 表达式
	when 值1 then 结果1或语句1(如果是语句，需要加分号) 
	when 值2 then 结果2或语句2(如果是语句，需要加分号)
	...
	else 结果n或语句n(如果是语句，需要加分号)
	end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）
	
	情况二：类似于多重if
	case 
	when 条件1 then 结果1或语句1(如果是语句，需要加分号) 
	when 条件2 then 结果2或语句2(如果是语句，需要加分号)
	...
	else 结果n或语句n(如果是语句，需要加分号)
	end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）


特点：
	可以用在任何位置

三、if elseif语句

语法：

	if 情况1 then 语句1;
	elseif 情况2 then 语句2;
	...
	else 语句n;
	end if;

特点：
	只能用在begin end中！！！！！！！！！！！！！！！


三者比较：
			应用场合
	if函数		简单双分支
	case结构	等值判断 的多分支
	if结构		区间判断 的多分支


###循环

语法：


	【标签：】WHILE 循环条件  DO
		循环体
	END WHILE 【标签】;

特点：

	只能放在BEGIN END里面
	
	如果要搭配leave跳转语句，需要使用标签，否则可以不用标签
	
	leave类似于java中的break语句，跳出所在循环！！！



































