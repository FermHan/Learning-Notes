[TOC]

# 第1章  Spring概述 

## 1.1 Spring概述 

1)        Spring是一个开源框架 

2)        Spring为简化企业级开发而生，使用Spring，JavaBean就可以实现很多以前要靠EJB才能实现的功能。同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能够实现，而在Spring中却非常的优雅和简洁。 

3)        Spring是一个**IOC**(DI)和**AOP**容器框架。

4)        Spring的优良特性

 ①  **非侵入式**：基于Spring开发的应用中的对象可以不依赖于Spring的API

> 什么叫侵入式：
>
> 你写的应用是否耦合于你使用的技术。比如使用spring的时候，完成某些功能的时候，有没有强制性地要求实现它的一些借口或者继承他的一些类。如果有，就是侵入式的。即如果已经使用这个代码，没有spring是没法用的。如果使用的功能，无需实现它的一些接口，那么就是非侵入式的。
>
> 还有一个叫法是轻量级/重量级。非侵入式是轻量级的，侵入式是重量级的。

 ②  **依赖注入**：DI——Dependency Injection，反转控制(IOC)最经典的实现。

 ③  **面向切面编程**：Aspect Oriented Programming——AOP

 ④  **容器**：Spring是一个容器，因为它包含并且管理应用对象的生命周期。

> tomcat也是一个容器。
>
> spring中不再使用new来创建对象了，而是交给spring管理，所以称spring是一个巨大的容器，这个容器的底层是一个工厂。

 **⑤**  **组件化**：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。

5)        **一站式**：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring 自身也提供了表述层的SpringMVC和持久层的Spring JDBC）。（实际上一般使用mybatis代替Spring JDBC）

6)        Spring模块

![](https://raw.githubusercontent.com/FermHan/tuchuang/master/20191007164714.png)

下面的IoC，右面是Spring MVC，左面是JDBC。

## 1.2 安装Spring插件【了解】

在eclipse--help中查看eclipse版本，然后去

- 版本3下载地址：https://spring.io/tools3/sts/all

- 版本4下载地址：https://spring.io/tools

注意下的文件前缀是`springsource-tool-suite`而不是`spring-tool-suite`，安的是源码。

然后在Eclipse中点Help----Install New Software...，然后点Add...---Archive（无需解压，如果解压了可以使用Local按钮），找到已经下载的包，点Add，然后选中4个带IDE的选项

![](https://raw.githubusercontent.com/FermHan/tuchuang/master/20191007183105.png)

一路Next--agree协议--Finish。等右下角进度条完成会重启Eclipse。然后会发现Welcome页面多了个Spring IDE选项。Prefrence里多了Spring菜单。

## 1.3 搭建Spring运行时环境

1)        加入JAR包

4 + 1  ： 4个核心（beans、core、context、expression） + 1个依赖（commons-loggins...jar）

下包地址：

- 核心：https://repo.spring.io/libs-release-local/org/springframework/spring/

- 依赖（点`jar 60k`或者选择其他版本下即可）：https://mvnrepository.com/artifact/commons-logging/commons-logging/1.2 

① Spring自身JAR包：spring-framework-版本号.RELEASE\libs目录下

```
spring-beans-版本号.RELEASE.jar
spring-context-版本号.RELEASE.jar
spring-core-版本号.RELEASE.jar
spring-expression-版本号.RELEASE.jar
```

②` commons-logging-1.1.1.jar`

下完放到Eclipse中Web项目的WebRoot--Web-info---lib文件夹下（或者放到java项目lib下）（放的4个核心文件是`spring-framework-版本号.RELEASE\libs`目录下的`spring-beans-版本号RELEASE.jar`格式的，别的后缀的不要添加进去），添加后全部选中右键Build Path--Configure Build Path，然后这些jar包就出现在了Refrenced Libararies下。

2)        在Spring Tool Suite工具中通过如下步骤创建Spring的配置文件

​         ① File->New->Spring Bean Configuration File

​         ② 为文件取名字 例如：applicationContext.xml

创建好后，其文件内容如下

```XML
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>
```



## 1.4 HelloWorld

需要用到的知识：反射 https://blog.csdn.net/hancoder/article/details/102403759

步骤

xml文件----java中创建IoC容器-----java中用bean获取对象。

1)        目标：使用Spring创建对象，为属性赋值

2)        创建Student类

3)        创建Spring配置文件

```java
package com.atguigu.spring.helloWorld;

public class Person {
	
	private String  name ;  // 成员变量
	
	public Person( ) {
	}

	public String getName() {
		return name;
	}

	public void setName2(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Person [name=" + name + "]";
	} 
	
	//自定义方法
	public  void  sayHello() {
		System.out.println("My Name is " + name );
	}
}
```



最终application.xml文件的内容

```XML
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<!-- 配置bean ：必看
		  配置方式:  基于xml的方式 ,使用的全类名的方式.
		 <bean>: 受Spring管理的一个javaBean对象. 
		 	id:  <bean>的唯一标识. 在整个IOC容器中唯一不重复. 
		 	class: 指定javaBean的全类名. 目的是通过【反射】创建对象。 
		 		   Class cls = Class.forName("com.atguigu.spring.helloWorld.Person");
		 		   Object obj = cls.newInstance();   必须提供无参数构造器. 
		 <property>: 给对象的属性赋值
		  	name: 指定属性名  , 指定set风格的属性名. 
		  	value:指定属性值 	
	-->
	<bean id="person"  class="com.atguigu.spring.helloWorld.Person">
		<property name="name2" value="HanMeiMei"></property>
	</bean>
	
	<bean id="person1"  class="com.atguigu.spring.helloWorld.Person">
		<property name="name2" value="LiLei"></property>
	</bean>

</beans>

```

（其实如果想阅读反射的内容，可以查看https://blog.csdn.net/huangliniqng/article/details/88554510）

xml文件解释在xml文件注释中有解释

```XML
	<!-- 使用bean元素定义一个由IOC容器创建的对象 -->
	<!-- class属性指定用于创建bean的全类名 -->
	<!-- id属性指定用于引用bean实例的标识 -->
```



main函数：

```JAVA
package com.atguigu.spring.helloWorld;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
	public static void main(String[] args) {
		// 获取到Person对象. 
		
		//1. 创建Spring的IOC容器对象
		ApplicationContext ctx = 
				new ClassPathXmlApplicationContext("applicationContext.xml");
		
		// 2.getBean重载1 根据id="Person"创建了一个对象
		//Person person = (Person)ctx.getBean("person");
        // person.sayHello();
        
        // 2.getBean重载2 	//根据class创建对象，可只万一xml中有重复的将报错
		//Person person = ctx.getBean(Person.class);
        // person.sayHello();
        
        // 2.getBean重载3
		//expected single matching bean but found 2: person,person1
		Person person = ctx.getBean("person1",Person.class);//根据id=Person1
		person.sayHello();
	}
}
```



```java
	<bean id="student" class="com.atguigu.helloworld.bean.Student">
		<!-- 使用property子元素为bean的属性赋值 -->
		<property name="studentId" value="1001"/>
		<property name="stuName" value="Tom2015"/>
		<property name="age" value="20"/>
	</bean>
```
4)        测试：通过Spring的IOC容器创建Student类实例

```JAVA
//1.创建IOC容器对象
ApplicationContext iocContainer = 
		new ClassPathXmlApplicationContext("helloworld.xml");
//2.根据id值获取bean实例对象
Student student = (Student) iocContainer.getBean("student");
//3.打印bean
System.out.println(student);
```





 

![](https://raw.githubusercontent.com/FermHan/tuchuang/master/20191008201548.png)














